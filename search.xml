<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>5、阅读笔记：思历史虚无主义</title>
      <link href="/2022/11/26/5-yue-du-bi-ji-si-li-shi-xu-wu-zhu-yi/"/>
      <url>/2022/11/26/5-yue-du-bi-ji-si-li-shi-xu-wu-zhu-yi/</url>
      
        <content type="html"><![CDATA[<p>​前段时间，我读了许多有关存在主义的哲学书籍，于是启发我读了一本，叫做《警惕历史虚无主义思潮》的书。通读一遍后，虽有很多知识尚不能很好理解，但使我感触良多。</p><p>​都说以铜为镜，可以正衣冠；以史为镜，可以知兴替。历史是一个国家、一个民族安身立命的基础。在党的二十大报告中，习近平总书记指出，要坚定历史自信，增强历史主动。在报告中我们可以注意到，除了党史、新中国史、改革开放史、社会主义发展史这“四史”，还增加了中华民族发展史。坚定历史自信，增强历史主动，我们就要深入学习、正确认识党史、新中国史、改革开放史、社会主义发展史、中华民族发展史。可不容回避的是，历史虚无主义等错误思潮仍不时出现。不管走多久、走多远，我们始终都要抵制和反对历史虚无主义。正如习近平总书记指出，要旗帜鲜明反对历史虚无主义，加强思想引导和理论辨析。</p><p>​历史虚无主义借所谓“解放思想”“反思历史”“重新评价”等由头不断否定中国共产党领导的人民革命史，否定中国共产党领导的新中国建设的历史成就，否定和贬损革命前辈，诋毁党的领袖，极力抹黑近现代以来的党史、国史。</p><p>​现实中，有些人自谓熟悉党史，从事件到人物，从梗概到细节，讲得活灵活现，煞有介事。但稍加考证就不难发现，很多内容不准确、不真实，只是坊间传说或演绎，甚至是境外敌对势力别有用心的凭空臆造。这些打着“史海钩沉”幌子的书文，常常噱头十足，很能吸引眼球。有的捕风捉影，编造八卦轶闻；有的名为“揭秘”，实则大做翻案文章；有的影射现实，渲染炒作“阴谋论”……凡此种种，阅读者的猎奇心理得到了满足，同时，却在不知不觉中，落入历史虚无主义的圈套。</p><p>​比如，有的以所谓“口述史”和个人“回忆”的方式，否定党领导的“一化三改”，看不到它在奠定社会主义制度与开创人类历史新纪元的重大历史意义；有的极力渲染甚至编造“大跃进”期间发生的失误，以证明中国共产党不懂经济，根本没有抓经济建设的能力；有的无限夸大某些历史事件的“细节”和感受，涂黑历史，欺骗善良人们的感情，甚至捏造出“饿死几千万人”的谎言，企图煽起对党的领导的不满；有的以批判“文革”为名，把党和新中国的历史说成是一系列“左”的错误的延续和叠加，以此否定中国共产党的执政能力；有的无视新中国的思想文化建设成就，把爱国主义说成是“民族自大的封闭观念”，把集体主义说成是“压抑人的个性”，把社会主义说成是“乌托邦”。与此相反，他们把媚外卖国当成全球化的自然现象，把极端自私自利当成“人的本性”和“自由权利”，把资本主义当成唯一的永恒制度等。</p><p>​习近平一针见血地指出，国内外敌对势力往往就是拿中国革命史、新中国历史来做文章，竭尽攻击、丑化、污蔑之能事，根本目的就是要搞乱人心，煽动推翻中国共产党的领导和我国社会主义制度。</p><p>​对待历史虚无主义，我们的脑子要特别清醒、眼睛要特别明亮、立场要特别坚定。学习党史也要捍卫党史，要旗帜鲜明反对历史虚无主义，勇敢地与之交锋。</p><p>​如何正确地认识与把握历史？习近平说，唯物史观是我们共产党人认识把握历史的根本方法。实事求是看待党史上的一些重大问题，既不能因为成就而回避失误和曲折，也不能因为探索中的失误和曲折而否定成就。毕竟，我们用怎样的眼光看待历史，就决定着将以何种姿态开辟未来。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史虚无主义 </tag>
            
            <tag> 党 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些奇怪的库存</title>
      <link href="/2022/11/26/4-yi-xie-qi-guai-de-ku-cun/"/>
      <url>/2022/11/26/4-yi-xie-qi-guai-de-ku-cun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0944.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0945.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0943.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0835.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0812.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0628.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0533.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0525.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0299.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/%E5%A5%87%E6%80%AA%E8%AE%B0%E5%BD%95%20%E5%9B%BE/IMG_0239.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 图片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次太阳的记录</title>
      <link href="/2022/11/25/3-yi-ci-tai-yang-de-ji-lu/"/>
      <url>/2022/11/25/3-yi-ci-tai-yang-de-ji-lu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/IMG_1206.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/IMG_1207.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/IMG_1210.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/IMG_1211.JPG"></p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/IMG_1212.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 图片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 摄影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过hexo+Github搭建个人博客（一）准备工作</title>
      <link href="/2022/11/24/2-ru-he-ji-yu-hexo-github-da-jian-bo-ke-1-zhun-bei-gong-zuo/"/>
      <url>/2022/11/24/2-ru-he-ji-yu-hexo-github-da-jian-bo-ke-1-zhun-bei-gong-zuo/</url>
      
        <content type="html"><![CDATA[<p>这是一个关于个人博客搭建的经验教程。此教程基于mac系统配置写成，部分环节在系统上存在一定差异，但总体与win相差不大。</p><p>我的个人博客搭建主要依赖于hexo 与 GitHub 两部分，操作不算困难，但建议一步一步来。</p><p>let’s begin！</p><h1 id="1、GitHub账号的创建"><a href="#1、GitHub账号的创建" class="headerlink" title="1、GitHub账号的创建"></a>1、GitHub账号的创建</h1><h2 id="1-1注册一个GitHub账号"><a href="#1-1注册一个GitHub账号" class="headerlink" title="1.1注册一个GitHub账号"></a>1.1注册一个GitHub账号</h2><p>随着你写的代码越来越多，就需要去管理这些代码，可能要在不同的电脑上编写同一份代码，可能要和别人合作开发，也可能想把项目分享给别人。更进一步地，你可能还会需要管理代码的不同历史版本。于是你就得和代码管理工具以及代码托管平台打交道。</p><p>Github 是现在广泛流行的代码托管平台，很多开源项目都把代码放在这里。</p><p>1、首先进入：<a href="github.com">GitHub官网</a> （这里可能需要科学上网，具体方法不详讲）</p><p>2、点击绿色框Sign up for GitHub进行注册</p><p>3、注册页面第一栏email（邮箱），第二栏password（密码），第三栏username（用户名）进行验证后,选择 free免费项 ，即可完成注册。</p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125092109632-20221125210239118.png" style="zoom:15%;"><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125101414216.png" style="zoom:15%;"></p><h1 id="2、Git的安装"><a href="#2、Git的安装" class="headerlink" title="2、Git的安装"></a>2、Git的安装</h1><p>进入Git官网：<a href="https://git-scm.com/">Git官网</a> ,下载符合自己系统Git版本</p><h2 id="2-1-For-mac"><a href="#2-1-For-mac" class="headerlink" title="2.1 For mac"></a>2.1 For mac</h2><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125101713874-20221125210404956.png" style="zoom:25%;"> <img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125102803642.png" alt="image-20221125102803642" style="zoom: 25%;"></p><p>根据上图指南可知，可以根据电脑的配置选择相应的代码并输入Terminal终端中：</p><p>安装完成后可通过以下代买查询是否安装git：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1-1homebrew途径"><a href="#2-1-1homebrew途径" class="headerlink" title="2.1.1homebrew途径"></a>2.1.1homebrew途径</h3><p>查看是否安装homebrew可用以下代码查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，即可用以下代码进行git的安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-1-2-macports途径"><a href="#2-1-2-macports途径" class="headerlink" title="2.1.2 macports途径"></a>2.1.2 macports途径</h3><p>使用以下代码进行git的安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> port <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-2-For-windows"><a href="#2-2-For-windows" class="headerlink" title="2.2 For windows"></a>2.2 For windows</h2><p>下载后根据安装提示安装即可，有问题者可参考 <a href="https://git-scm.com/">git详细安装教程</a> 进行操作。</p><p>完成安装后可通过右键打开git bash 并输入以下内容进行版本查询：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、git与GitHub的绑定"><a href="#三、git与GitHub的绑定" class="headerlink" title="三、git与GitHub的绑定"></a>三、git与GitHub的绑定</h1><p>SSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议，利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。简单来说，SSH就是保障你的账户安全，将你的数据加密压缩，不仅防止其他人截获你的数据，还能加快传输速度。</p><p>在这里我们可以利用SSH来完成GitHub的绑定并上传文件，这样很方便快捷。</p><h2 id="3-1-绑定GitHub"><a href="#3-1-绑定GitHub" class="headerlink" title="3.1 绑定GitHub"></a>3.1 绑定GitHub</h2><p>要用git上传文件到GitHub首先得利用SSH登录远程主机。我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置，这里需要检验一下是否安装 SSH，我们在新建的文件夹中打开Terminal（win用户右键打开 Git Bash）：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125212848644-20221125212910338.png" alt="image-20221125212848644"></p><p>如上所示，为已安装SSH。</p><p>随后输入命令, 表示我们指定 RSA 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p><ul><li>Mac ：~/.ssh </li><li>Win ：C:/Users/ASUS/.ssh</li></ul><p>接下来我们进入GitHub页面进行设置，先点击右上角头像，找到<strong>settings</strong>选项。后找到SSH选项卡，再点击右处绿色按钮 <strong>New SSH key</strong>。</p><p>复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击 <strong>Add SSH key</strong>，其中Title标题可填可不填。</p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125213812036.png" alt="image-20221125213812036"></p><p>验证是否绑定成功可在 Terminal 或 Gitbash 中输入 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进行验证。</p><p>第一次会出现如图情况，输入Yes即可。最后当出现 You’ve successfully authenticated. 的字样即为绑定成功。<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125214623181.png" alt="image-20221125214623181"></p><h1 id="四、提交文件"><a href="#四、提交文件" class="headerlink" title="四、提交文件"></a>四、提交文件</h1><p>这里我采用的提交文件方式为：</p><ol><li>直接将远程仓库 clone 到本地；</li><li>将文件添加并 commit 到本地仓库；</li><li>将本地仓库的内容push到远程仓库。</li></ol><h2 id="4-1-详细步骤"><a href="#4-1-详细步骤" class="headerlink" title="4.1 详细步骤"></a>4.1 详细步骤</h2><p>首先新建一个仓库。</p><p>创建完成后点击 <strong>Clone or download</strong>，复制地址，然后通过git bash 或 terminal 进入我们准备存储 Git 仓库的本地目录。</p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125220013289.png" alt="image-20221125220013289" style="zoom:50%;"><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125220100444.png" alt="image-20221125220100444" style="zoom:25%;"><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221125220019808.png" alt="image-20221125220019808" style="zoom:25%;"></p><p>接下来，输入 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/Qiushan-Joshua/test-.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将远程仓库 clone 到本地，如下图：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126203929245.png" alt="image-20221126203929245"></p><p>找到本地文件夹，查看仓库是否与GitHub上的远程仓库项目一致：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126204123276.png" alt="image-20221126204123276"></p><p>接下来我们创建一个 试试你.txt 文件进行测试：</p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126204606828.png" alt="image-20221126204606828"></p><p>由此本地目录进入Git bash 或 Terminal 中，输入 git status 命令进行仓库状态的查询，会发现报出提示 untracked files，也就是说在 test- 这个git仓库中，所创建的 试试你.txt 未被追踪，也就是未被真正提交到本地的git仓库中。</p><p>现在我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库，如下图：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126205129923.png" alt="image-20221126205129923"></p><p>在第一次提交中，会出现要求提交用户名和邮箱的情况，此时只需要在命令框输入以下代码以及你的github即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email<span class="token string">"github 邮箱"</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name<span class="token string">"# github 用户名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成后输入 git log 命令查看仓库提交日志，再输入 git status 查看一下仓库状态，得到如下反馈：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126211323858.png" alt="image-20221126211323858"></p><p>现在输入 git push origin main 命令，将本地仓库提交到远程仓库，origin是远程主机的名字，第一次上传需要输入密码，验证成功后，如下图：<img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126211604014.png" alt="image-20221126211604014"></p><p>此时刷新GitHub中的 test- 仓库，便可看见 试试你.txt 已上传至远程仓库中。</p><p><img src="https://qiushan2001.oss-cn-hangzhou.aliyuncs.com/blog%20text/image-20221126211643708.png" alt="image-20221126211643708"></p><p>——————-end————-感谢您看到这里哈哈哈———————-</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My first post</title>
      <link href="/2022/11/24/1-my-first-blog-fu-ben-3/"/>
      <url>/2022/11/24/1-my-first-blog-fu-ben-3/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog ! This is my very first post!</p><p>I am not a student majoring in computer science and have little contact with computer knowledge. I would really appreciate your guidance and contact with me.</p><p>Here are some simple and naive tests to help me learn how to use a blog.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
